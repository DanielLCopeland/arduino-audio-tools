// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// -------------- //
// i2s_master_out //
// -------------- //

#define i2s_master_out_wrap_target 2
#define i2s_master_out_wrap 8

#define i2s_master_out_offset_start_output 0u

static const uint16_t i2s_master_out_program_instructions[] = {
    0x1060, //  0: jmp    !y, 0           side 0     
    0xb022, //  1: mov    x, y            side 0     
            //     .wrap_target
    0x7801, //  2: out    pins, 1         side 2     
    0x1c42, //  3: jmp    x--, 2          side 3     
    0x7001, //  4: out    pins, 1         side 0     
    0xb422, //  5: mov    x, y            side 1     
    0x7001, //  6: out    pins, 1         side 0     
    0x1446, //  7: jmp    x--, 6          side 1     
    0x7801, //  8: out    pins, 1         side 2     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program i2s_master_out_program = {
    .instructions = i2s_master_out_program_instructions,
    .length = 9,
    .origin = -1,
};

static inline pio_sm_config i2s_master_out_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + i2s_master_out_wrap_target, offset + i2s_master_out_wrap);
    sm_config_set_sideset(&c, 3, true, false);
    return c;
}

static inline void i2s_master_out(PIO pio, uint sm, pio_sm_config sm_config,  uint offset, uint data_pin, uint clock_pin_base, int sample_rate, int bits_per_sample) {
    // Clock Divider 
    float div = (float)clock_get_hz(clk_sys) / sample_rate * bits_per_sample;
    sm_config_set_clkdiv(&sm_config, div);
    // we use 32 bits to communicated except for int24_t
    int shift = bits_per_sample == 24 ? 24 : 32;
    sm_config_set_out_pins(&sm_config, data_pin, 1);
    sm_config_set_sideset_pins(&sm_config, clock_pin_base);
    sm_config_set_out_shift(&sm_config, false, true, shift);
    pio_sm_init(pio, sm, offset, &sm_config);
    uint pin_mask = (1u << data_pin) | (3u << clock_pin_base);
    pio_sm_set_pindirs_with_mask(pio, sm, pin_mask, pin_mask);
    pio_sm_set_pins(pio, sm, 0); // clear pins
    pio_sm_put(pio, sm, pio_encode_set(pio_y, bits_per_sample));
    pio_sm_set_enabled(pio, sm, true);
}

#endif

